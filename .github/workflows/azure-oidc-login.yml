name: Azure OIDC Go Deploy

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: my-go-oidc-demo
  AZURE_RESOURCE_GROUP: my-go-oidc-rg
  DOCKER_IMAGE_NAME: my-go-oidc-demo
  ACR_NAME: mygooidcacr

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME .

      - name: Create resource group (if not exists)
        run: |
          az group create --name $AZURE_RESOURCE_GROUP --location eastus

      - name: Create Azure Container Registry (if not exists)
        run: |
          az acr create --resource-group $AZURE_RESOURCE_GROUP \
            --name $ACR_NAME \
            --sku Basic || true

      - name: Login to ACR
        run: |
          az acr login --name $ACR_NAME

      - name: Tag and Push Docker image to ACR
        run: |
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)
          docker tag $DOCKER_IMAGE_NAME $ACR_LOGIN_SERVER/$DOCKER_IMAGE_NAME:latest
          docker push $ACR_LOGIN_SERVER/$DOCKER_IMAGE_NAME:latest
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

      - name: Create App Service Plan (if not exists)
        run: |
          az appservice plan create \
            --name my-go-oidc-plan \
            --resource-group $AZURE_RESOURCE_GROUP \
            --sku B1 \
            --is-linux \
            --location centralindia || true

      - name: Create Web App (if not exists)
        run: |
          az webapp create \
            --resource-group $AZURE_RESOURCE_GROUP \
            --plan my-go-oidc-plan \
            --name $AZURE_WEBAPP_NAME \
            --deployment-container-image-name $ACR_LOGIN_SERVER/$DOCKER_IMAGE_NAME:latest || true

      - name: Configure Web App to use image from ACR
        run: |
          az webapp config container set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --docker-custom-image-name $ACR_LOGIN_SERVER/$DOCKER_IMAGE_NAME:latest \
            --docker-registry-server-url https://$ACR_LOGIN_SERVER

